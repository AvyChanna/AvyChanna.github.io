[{"content":"Dual_EC_DRBG State Diagram\nstateDiagram-v2 state \"Internal-State = s\" as s state \"Next-State = t\" as t state \"Pseudo-random-number = r\" as r s -- t: Î¦(sâ‹…P) t -- s t -- r: Î¦(tâ‹…Q) note left of s: Note - Initial state is decided by a \"seed\" on first iteration note right of r: Mermaid JS does not support latex tho  ","description":"","image":null,"permalink":"/posts/mermaid-test/","subtitle":null,"tags":[],"title":"Mermaid Test"},{"content":"A beginner friendly explaination of some select algorithms in number theory. This is, by no means, a complete/detailed post. For more information on these algorithms, consult a reliable source like Wikipedia.\nGreatest Common Divisor GCD (also called HCF) finds common divisors of 2 numbers.\n Shortcut -\u0026gt; $ gcd(a,b) = gcd(a\\%b, b) $.\n The following is an implementation of Euclidean Algorithm.\ndef gcd(x, y): \u0026#39;\u0026#39;\u0026#39;finds GCD of 2 positive integers\u0026#39;\u0026#39;\u0026#39; while y: y, x = x % y, y return x # Or simply do -\u0026gt; # from math import gcd # result = gcd(25, 15)  We use divison lemma $a = bq+r$. In next iteration, put $a = b$ and $b = r$ and repeat till $r = 0$.\nLet us define 2 sequences $\\{q_i\\}$, $\\{r_i\\}$, such that $r_{i-2} = r_{i-1}q_{i}+r_i$, where $\\{r_i\\}$ is the squence of remainders in integer division, with $r_{0}=a$ and $r_{1}=b$ as our initial conditions.\nWe iterate this seqence $i$ times till we reach $r_{i-1} = 0$. The term $r_{i-2}$ is the required GCD.\nExample - $gcd(100, 26)$\n    Expression($a=bq+r$) $ b$ $ r$     $100 = 3 \\times 26 + 22$ $26$ $22$   $ 26 = 1 \\times 22 + 4$ $22$ $ 4$   $ 22 = 5 \\times 4 + 2$ $ 4$ $ 2$   $ 4 = 2 \\times 2 + 0$ $ 2$ $ 0$      #table-style-1 table th:nth-of-type(1){width:80%} #table-style-1 table th:nth-of-type(2){width:10%} #table-style-1 table th:nth-of-type(3){width:10%}  Here, $\\{r_i\\} = \\{100, 26, 22, 4, 2, 0\\}$ and $\\{q_i\\} = \\{3, 1, 5, 2\\}$.\nNote that, $gcd(a,b) = gcd(r_0,r_1) = gcd(r_1,r_2) = \u0026hellip; = gcd(r_{-3},r_{i-2})$ and $gcd(r_{i-1}) = 0$\nSo, $gcd(100, 26) = 2$\nBÃ©zout\u0026rsquo;s identity Theorem - for two integers $a$ \u0026amp; $b$, $\\exists$ integers $x$ \u0026amp; $y$ such that $ax+by=d$, where $d=gcd(a,b)$\nMoreover all integers of the type $ax+by$ are divisible by $d$. Note that BÃ©zout coefficients($x$ and $y$) are not unique.\nFor example, for $a=3$ and $b=5$, we have $d=1$ and $2a-b=d$. This means $(x, y)=(2,-1)$ is one solution. Ofcourse, all pairs of the form $(2+5k,-1-3k)$ are valid coefficients.\nThe simplest way to find one of these pairs is by using Extended Euclidean Algorithm, with $|x| \\le \\left | \\frac{b}{d}\\right |$ and $|y|\\le\\left |\\frac{a}{d}\\right |$. For a given solution $(x,y)$, we can generate all possible coefficients by using $\\left(x+k\\frac{b}{d},\\ y-k\\frac{a}{d}\\right)$, for any integer $k$ where all these fractions simplify to integers.\nConvince yoursef. Hint - Let $ax_0\u0026#43;by_0=0$ be for some $(x_0,y_0)$. For all integer $k$, $ax\u0026#43;by = (ax\u0026#43;by)\u0026#43;k\\cdot(ax_0\u0026#43;by_0)$, so new solutions will be of the form $(x\u0026#43;kx_0,y\u0026#43;ky_0)$  Shortcut - If $gcd(n_1,n_2) = 1$, then $x \\equiv n_{1}^{-1} (mod~n_2)$ and $y \\equiv n_{2}^{-1} (mod~n_1)$\n Extended Euclidean Algorithm This is an extension of Euclidean Algorithm, which also provides BÃ©zout coefficients along with the GCD.\nIt also uses Euclidean algorithm, but also finds r as a linear combination of $a$ and $b$\nLet us define 4 sequences $\\{q_i\\}$, $\\{r_i\\}$, $\\{x_i\\}$, $\\{y_i\\}$. The sequences $\\{q_i\\}$, $\\{r_i\\}$ are the same ones from Euclidean Algorithm, that is, $r_{i-2} = r_{i-1}q_{i}+r_i$, $r_0=a$, $r_1=b$, $r_{i-1} = 0$ for some i. We also need to write $r_i$ as linear combination of $a$ and $b$, such that $r_i = x_ia+y_ib$\nNow, $r_i = r_{i-2}-r_{i-1}q_i$ and $r_i = x_ia+y_ib$\nSubstituting values of $r$ in $x$ and $y$, we get $(x_ia+y_ib) = (x_{i-2}a+y_{i-2}b) - (x_{i-1}a+y_{i-1}b)q_i$, which gives us the relations\n$x_i = x_{i-2} - x_{i-1}q_i$ and $y_i = y_{i-2} - y_{i-1}q_i$\nAlso, $r_0 = a = x_0a+y_0b$ and $r_1 = b = x_1a+y_ib$, which gives us inital values $x_0=1$, $y_0=0$, $x_1=0$, $y_1=1$,\ndef egcd(a, b): # returns (GCD(a, b), x, y) # where x \u0026amp; y follow ax \u0026#43; by = GCD(a, b) old_x, new_x = 1, 0 old_y, new_y = 0, 1 while a != 0: q, a, b = b//a, b%a, a # From division lemma new_x, old_x = old_x, new_x - q * old_x new_y, old_y = old_y, new_y - q * old_y return b, new_x, new_y  Chinese Remainder Theorem Theorem - Given $n_1, n_2, \u0026hellip; , n_i$ pairwise co-prime positive integers (all numbers are co-prime to each other), with $N$ = product of all $n_i$, = and $a_1, a_2, \u0026hellip; , a_i$ integers with $0 \\le a_i \\lt n_i$ for each $i$, then there is one and only one positive integer $x$ in $0 \\le x \\lt N$, such that remainder of integer divison of $x$ by $n_j$ is $a_j$ for every j.\nIn other words, there is always a unique solution for x between $0$ and $N$ for - $$ \\begin{aligned} x \\equiv \u0026amp; n_0 (mod~a_0) \\\\ x \\equiv \u0026amp; n_1 (mod~a_1) \\\\ \u0026amp; \\vdots \\\\ x \\equiv \u0026amp; n_i (mod~a_i) \\end{aligned} $$ Let us first solve it for 2 moduli only, say $x \\equiv a_1 (mod~n_1)$ and $x \\equiv a_2 (mod~n_2)$. Then using BÃ©zout\u0026rsquo;s Identity, there exists integers $m_1$ and $m_2$ such that $m_1n_1 + m_2n_2 = 1$. We can easily verify that the solution to this equation is $x \\equiv a_1m_2n_2+a_2m_1n_1 (mod~n_1n_2)$\nFor n equations, we can apply the above result n-1 times, since the resultant modulus($n_1n_2$) will also be co-prime to other remaining moduli.\n Single Step Computation - For $k$ equations, $x \\equiv \\displaystyle\\sum_{i=1}^{k}a_iM_iN_i~(mod~N)$, where $N = \\displaystyle\\prod_{i=1}^{k} n_i$, $N_i = \\dfrac{N}{n_i}$ and $M_iN_i + m_in_i = 1$(from BÃ©zout\u0026rsquo;s Identity) or directly, $M_i = N_i^{-1} (mod~n_i)$\n This single step computation may not be very useful, because as we increase the number of moduli, their product becomes very large for efficient computation.\n","description":"A (short) primer on basics of Number theory","image":null,"permalink":"/posts/number-theory-primer/","subtitle":null,"tags":["maths","number theory"],"title":"Number Theory Primer"},{"content":"Sample AES code\n# Pycryptodome from functools import reduce from getpass import getpass from Crypto.Cipher import AES from Crypto.Util.Padding import pad, unpad decode = input(\u0026#34;Encode/Decode? [E/d]\u0026#34;).lower().startswith(\u0026#39;d\u0026#39;) key = getpass(\u0026#34;KEY=\u0026#34;).encode(\u0026#34;latin-1\u0026#34;) key = pad(key, 32) if len(key) \u0026gt; 32: key_lst = [] for i in range(0, len(key), 32): key_lst.append(key[i:i \u0026#43; 32]) key_new = map(lambda x: int(x.hex(), 16), key_lst) key = reduce(lambda x, y: x ^ y, key_new).to_bytes(32, \u0026#39;big\u0026#39;) assert len(key) == 32 if decode: buffer = bytes.fromhex(input(\u0026#34;CIPHERTEXT=\u0026#34;)) cipher = AES.new(key, AES.MODE_EAX, b\u0026#39;0123456789abcdef\u0026#39;) print(f\u0026#34;Plaintext = {cipher.decrypt(buffer).decode(\u0026#39;latin-1\u0026#39;)}\u0026#34;) else: buffer = input(\u0026#34;PLAINTEXT=\u0026#34;).encode(\u0026#34;latin-1\u0026#34;) buffer = pad(buffer, 32) cipher = AES.new(key, AES.MODE_EAX, b\u0026#39;0123456789abcdef\u0026#39;) print(f\u0026#34;ciphertext = {cipher.encrypt(buffer).hex()} , Keep it safe\u0026#34;)  ","description":"Code syntax highlighting test","image":null,"permalink":"/posts/prismjs-test/","subtitle":null,"tags":["python"],"title":"Prism.js Test"},{"content":"TEST This is a testing sentence. This sentence was also added for testing. Tongue-twister -\u0026gt; The tests tests the tests using tests inside tests.\n a = 2 b = 3 print(a \u0026#43; b) 5 print(a - b) -1  // Testing in C /* Line 1-3 are expected to be highlighted */ #include\u0026lt;stdio.h\u0026gt; int main(){ printf(\u0026#34;Testing\\n\u0026#34;); /* Testing */ return 0; }  Spoiler Testing - This spoiler looks so cool  Core page size (excluding images) ~ 240 KB (fast enough for mobile users).\nEmoji Testing - ðŸ’¯\nEND testing\nNoice\n","description":"This is a test post","image":null,"permalink":"/posts/test/","subtitle":null,"tags":["test","a","v","y"],"title":"Test Post"}]